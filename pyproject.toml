[build-system]
requires = [
    "setuptools>=69.0.0",
    "wheel"
]
build-backend = "setuptools.build_meta"

[project]
name = "elvislis"
version = "0.1.0"
authors = [
    {name = "EnergyAIBerlin", email = "contact@energyai.berlin"},
]
description = "A planning and management tool for electric vehicles charging infrastructure"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
keywords = ["electric vehicles", "charging infrastructure", "simulation", "energy"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "matplotlib>=3.10.6",
    "networkx>=3.5",
    "numpy>=2.3.0",
    "pyyaml>=6.0.2",
    "pandas>=2.3.2",
    "scipy>=1.16.1",
    "scikit-learn>=1.7.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.0",
    "pytest-cov>=6.0.0",
    "black>=25.9.0",
    "isort>=5.13.0",
    "flake8>=7.1.0",
    "mypy>=1.18.0",
    "ruff>=0.8.0",
]
docs = [
    "sphinx>=8.2.0",
    "sphinx-rtd-theme>=3.0.0",
]
jupyter = [
    "jupyterlab>=4.4.0",
    "ipykernel>=6.29.0",
    "notebook>=7.4.0",
]

[project.urls]
Homepage = "https://github.com/EnergyAIBerlin/elvis"
Documentation = "https://github.com/EnergyAIBerlin/elvis#readme"
Repository = "https://github.com/EnergyAIBerlin/elvis.git"
Issues = "https://github.com/EnergyAIBerlin/elvis/issues"

[tool.uv]
dev-dependencies = [
    "pytest>=8.4.0",
    "pytest-cov>=6.0.0",
    "black>=25.9.0",
    "isort>=5.13.0",
    "flake8>=7.1.0",
    "mypy>=1.18.0",
    "ruff>=0.8.0",
    "jupyterlab>=4.4.0",
    "ipykernel>=6.29.0",
    "notebook>=7.4.0",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["elvis*"]
exclude = ["tests*"]

[tool.ruff]
target-version = "py312"
line-length = 100

[tool.ruff.lint]
select = [
    "E","W","F","I","N","D","UP","YTT","ANN","S","BLE","B","A","COM","C4","DTZ","T10","EXE","ISC","ICN","G","INP","PIE","T20","PT","Q","RSE","RET","SLF","SIM","TID","TCH","ARG","PTH","ERA","PD","PGH","PL","PLC","PLE","PLR","PLW","TRY","NPY","RUF",
]
ignore = [
    "D100",
    "D104",
    "D203",
    "D213",
    "PLR0913",
    "PLR2004",
    "S101",
    "TRY003",
    "COM812", # avoid conflicts with formatter
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ALL"]
"examples/*" = ["D", "ANN", "T201", "S101"]
"setup.py" = ["D", "ANN"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=elvis --cov-report=term-missing --cov-report=html --strict-markers"
markers = [
    "integration: marks tests as integration tests (slower)",
    "performance: marks tests as performance tests (very slow)",
    "slow: marks tests as slow running",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
minversion = "6.0"

[tool.coverage.run]
source = ["elvis"]
omit = [
    "tests/*",
    "examples/*",
    "*/__init__.py",
    "*/main.py",
]
branch = true

[tool.coverage.report]
show_missing = true
skip_covered = false
fail_under = 10
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
